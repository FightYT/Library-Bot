from aiogram import Router, html
from aiogram.types import Message
from aiogram.filters import Command, CommandObject

from src.database import Genres, Books
from src.utils.others import get_form

router = Router(name="search_book")


@router.message(Command("search"))
async def search(message: Message, command: CommandObject):
    if command.args is None:
        return await message.answer(get_form(search.__name__))

    try:
        if ";" in command.args:
            title, author = command.args.split(";", maxsplit=1)
        else:
            title, author = command.args, None
    except ValueError:
        return await message.answer(get_form(search.name))

    author = author if author and len(author) > 2 else None

    if author:
        book = await Books.filter(title=title, author=author).first()
    else:
        book = await Books.filter(title=title).first()

    if not book:
        return await message.answer("‚ÑπÔ∏è <b>–ù–µ –Ω–∞—à—ë–ª –∫–Ω–∏–≥—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö</b>")

    genre = await Genres.filter(id=book.genre_id).first()

    await message.answer(
        f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–Ω–∏–≥–µ</b> {html.code(book.title)}\n"
        f"‚ÑπÔ∏è <b>–ê–≤—Ç–æ—Ä:</b> {html.code(book.author)}\n"
        f"‚ÑπÔ∏è <b>–ñ–∞–Ω—Ä:</b> {html.code(genre.genre)}\n"
        f"‚ÑπÔ∏è <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {html.unparse(book.description)}\n\n"
        f"<b>üìÄ –ï—ë ID –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:</b> {html.code(book.id)}"
    )

