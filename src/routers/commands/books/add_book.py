from aiogram import Router, F, html
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext

from src.database import Genres, Books
from src.utils.states import AddBook
from src.utils.models import CreatedBookModel
from src.utils.keyboards import get_cancel_kb, get_confirm_kb

router = Router(name="add_book")


@router.message(StateFilter(None), Command("add_book"))
async def add_book(message: Message, state: FSMContext):
    await message.answer(
        "üìö <b>–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–∏–∂–∫–∏ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å</b> "
        "<code>–Ω–∞–∑–≤–∞–Ω–∏–µ, –∞–≤—Ç–æ—Ä–∞, –∂–∞–Ω—Ä –∏ –æ–ø–∏—Å–∞–Ω–∏–µ</code>\n"
        "üß®Ô∏è <b>–ë–æ—Ç –±—É–¥–µ—Ç –ø–æ–æ—á–µ—Ä–µ–¥–Ω–æ —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å —É –≤–∞—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é</b>\n\n"
        "‚úçÔ∏è –ü–æ–∂–∞–ª—É–π –Ω–∞—á–Ω—ë–º: <code>—É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–∫–∏</code>\n\n"
        "üö´ <code>–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ–π–¥—ë—Ç –Ω–µ —Ç–∞–∫</code> - <b>–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –û—Ç–º–µ–Ω–∞</b>",
        reply_markup=get_cancel_kb()
    )
    await state.set_state(AddBook.entering_book_name)


@router.message(AddBook.entering_book_name, F.text != "–û—Ç–º–µ–Ω–∞")
async def handle_book_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.answer(
        "üìö <b>–û—Ç–ª–∏—á–Ω–æ.</b> <code>–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞:</code>",
        reply_markup=get_cancel_kb())
    await state.set_state(AddBook.entering_book_author)


@router.message(AddBook.entering_book_author, F.text != "–û—Ç–º–µ–Ω–∞")
async def handle_book_author(message: Message, state: FSMContext):
    await state.update_data(author=message.text)

    base = await Genres.all()
    genres = "".join([row.genre + "\n" for row in base])

    await message.answer(
        "üìö <b>–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –∂–∞–Ω—Ä</b>\n"
        f"üíº <code>–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –∂–∞–Ω—Ä–æ–≤:</code> \n{genres}\n"
        "<b>‚úçÔ∏è –ï—Å–ª–∏ –∂–∞–Ω—Ä–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ - –≤—Å–µ —Ä–∞–≤–Ω–æ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ, –æ–Ω –±—É–¥–µ—Ç –∑–∞–Ω–µ—Å—ë–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö</b>",
        reply_markup=get_cancel_kb()
    )
    await state.set_state(AddBook.entering_book_genre)


@router.message(AddBook.entering_book_genre, F.text != "–û—Ç–º–µ–Ω–∞")
async def handle_book_genre(message: Message, state: FSMContext):
    await state.update_data(genre=message.text)
    await message.answer(
        "üìö <b>–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–Ω–∏–≥–∏:</b>",
        reply_markup=get_cancel_kb())
    await state.set_state(AddBook.entering_book_description)


@router.message(AddBook.entering_book_description, F.text != "–û—Ç–º–µ–Ω–∞")
async def handle_book_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    form = CreatedBookModel(**await state.get_data())

    await message.answer(
        "üîé <b> –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:</b>\n\n"
        f"‚ÑπÔ∏è <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {html.code(form.title)}\n"
        f"‚ÑπÔ∏è <b>–ê–≤—Ç–æ—Ä:</b> {html.code(form.author)}\n"
        f"‚ÑπÔ∏è <b>–ñ–∞–Ω—Ä:</b> {html.code(form.genre)}\n"
        f"‚ÑπÔ∏è <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {html.unparse(form.description)}\n\n"
        "üòä <b>–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ - –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \"–í—Å–µ –≤–µ—Ä–Ω–æ\"</b>\n"
        "üö´ <b>–ï—Å–ª–∏ –≤—ã –¥–æ–ø—É—Å—Ç–∏–ª–∏ –æ—à–∏–±–∫—É - –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \"–û—Ç–º–µ–Ω–∏—Ç—å\"</b>",
        reply_markup=get_confirm_kb()
    )
    await state.set_state(AddBook.confirm)


@router.message(StateFilter(None), F.text == "–û—Ç–º–µ–Ω–∞")
async def cmd_cancel_no_state(message: Message, state: FSMContext):
    await state.set_data({})
    await message.answer(
        text=f"‚ÑπÔ∏è <b>–û—Ç–º–µ–Ω—è—Ç—å –Ω–µ—á–µ–≥–æ.</b>",
        reply_markup=ReplyKeyboardRemove()
    )


@router.message(AddBook.confirm, F.text == "–í—Å–µ –≤–µ—Ä–Ω–æ")
async def confirm_yes(message: Message, state: FSMContext):
    form = CreatedBookModel(**await state.get_data())

    base = await Genres.filter(genre=form.genre).first()
    if not base:
        # –ï—Å–ª–∏ –∂–∞–Ω—Ä–∞ –Ω–µ—Ç –≤ –ë–î –∑–∞–Ω–æ—Å–∏–º –µ–≥–æ
        base = await Genres.create(genre=form.genre)
        await message.answer(
            f"‚ÑπÔ∏è <b>–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–Ω–µ—Å–ª–∞ –∂–∞–Ω—Ä</b> {html.code(form.genre)} "
            f"<b>–≤ —Å–ø–∏—Å–æ–∫ –∂–∞–Ω—Ä–æ–≤.</b>")

    book = await Books.create(
        title=form.title, author=form.author,
        genre_id=base.id, description=form.description
    )
    await message.answer(
        f"üîé <b>–í—ã —É—Å–ø–µ—à–Ω–æ –≤–Ω–µ—Å–ª–∏ –∫–Ω–∏–≥—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:\n–í–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–µ–π:\n</b>"
        f"‚ÑπÔ∏è <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {html.code(form.title)}\n"
        f"‚ÑπÔ∏è <b>–ê–≤—Ç–æ—Ä:</b> {html.code(form.author)}\n"
        f"‚ÑπÔ∏è <b>–ñ–∞–Ω—Ä:</b> {html.code(form.genre)}\n"
        f"‚ÑπÔ∏è <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {html.unparse(form.description)}\n\n"
        f"<b>üìÄ –ï—ë ID –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:</b> {html.code(book.id)}",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.clear()


@router.message(F.text == "–û—Ç–º–µ–Ω–∞")
async def confirm_no(message: Message, state: FSMContext):
    await message.answer(
        f"‚ÑπÔ∏è <b>–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–∂–∫–∏</b>",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.clear()
