from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command, CommandObject

from src.database import Books
from src.utils.others import get_form

router = Router(name="keyword")


@router.message(Command("keyword"))
async def keyword(message: Message, command: CommandObject):
    if not command.args:
        return await message.answer(get_form(keyword.__name__))

    try:
        key_word = command.args[0]
    except ValueError:
        return await message.answer(get_form(keyword.__name__))

    try:
        books = await Books.raw(f"SELECT * FROM books WHERE title LIKE '%{key_word}%' OR author LIKE '%{key_word}%'")
    except Exception:
        return await message.answer(
            f"‚ÑπÔ∏è <b>–û—à–∏–±–∫–∞: –ü—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ</b>")

    if not books:
        return await message.answer(f"‚ÑπÔ∏è <b>–û—à–∏–±–∫–∞: –ü–æ –≤–∞—à–µ–º—É –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</b>")

    list_of_books = "".join("{} - {}\n".format(book.title, book.author) for book in books)

    await message.answer(
        "üìö <b>–°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ –ø–æ –≤–∞—à–µ–º—É –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É:</b>\n"
        f"<b>–§–æ—Ä–º–∞—Ç:</b> <code> –ù–∞–∑–≤–∞–Ω–∏–µ - –ê–≤—Ç–æ—Ä</code>\n{list_of_books}")